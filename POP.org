#+TITLE: The Practice of Programming
#+TODO 再読が必要 まぁまぁわかった | 理解できた
* 第1章 スタイル
** 1.1 名前
*** グローバルにはわかりやすい名前を，ローカルには短い名前を
慣習に従うと，短くできることがある．
ループ変数i, j, ポインタのp, qなど．
*** 統一しよう
1つの概念には1つの用語を使うべき．
*** 関数には能動的な名前を
返り値が明確になるような名前もいい．isoctal()など．
*** 名前は的確に
**** 問題1-1
次のコードの名前と値の選び方についてコメントせよ
#+BEGIN_SRC C
  #define TRUE 0
  #define FALSE 1
  if ((ch = getchar()) == EOF)
      not_eof = FALSE;
#+END_SRC
TRUEとFALSEの値を逆にし，not_eofをis_eofにしたほうがよい．
**** 問題1-2
次の関数を改良せよ
#+BEGIN_SRC C
  int smaller (char *s, char *t) {
      if (strcmp(s, t) < 1)
          return 1;
      else
          return 0;
  }
#+END_SRC
strcmp(a, b)は，aがbより大きければ正の整数値，aがbより小さければ負の整数値，等しければ0を返す．
関数の名前を正しくするにはsmaller_or_equalとなるが，長いので，biggerとしてはどうか．
#+BEGIN_SRC C
  int bigger (char *s, char *t) {
      if (strcmp(s, t) > 0)
          return 1;
      else
          return 0;
  }
#+END_SRC
**** 問題1-3
次のコードを音読せよ
#+BEGIN_SRC C
  if ((falloc(SMRHSHSCRTCH, S_IFEXT | 0644, MAXRODDHSH)) < 0)
      ...
#+END_SRC
むりむり．
** 1.2 式と文
*** 構造がわかるようにインデントしよう
*** 自然な形の式を使おう
否定が入っていると分かりづらくなるのでなるべく避ける
*** 括弧を使ってあいまいさを解消しよう
見かけは
if (x&MASK == BITS)
と書いてあっても，
実際には
if (x & (MASK == BITS))
と評価されてしまう．
意図を正しく伝えるために括弧を書けば，これを避けられる．
*** 複雑な式は分割しよう
式の構文や演算子が充実しているからといって，調子にのって短く書きすぎるな．
#+BEGIN_SRC C
  ,*x += (*xp = (2*k < (n-m) ? c[k+1] : d[k--])); /* いくら正しくても，理解しにくい */

  /* こう書けば，わかりやすい */
  if (2*k < n-m)
      ,*xp = c[k+1];
  else
      ,*xp = d[k--];
  ,*x += *xp;
#+END_SRC
*** 明解に書こう
明快さは，短さと同義ではない．
明解に書いた結果，コードは短くなることもあれば，長くなることもある．
*** 副作用に注意
++など，副作用を持った演算子には注意が必要．
表示と，値の更新が同時に実行されるとは限らないため．
str[i++] = str[i++] = '';
と，多重代入するのは危険．
おとなしく2回に分けて，
str[i++] =  '';
str[i++] =  '';
と書くべき．
scanf("%d %d", &yr, &profit[yr]);
も，意図した結果になることは決してない．
コンパイルした段階で全ての値が評価されるので，profit[yr]はscanfで読み込む前の古いyrの値を使う．
**** 問題1-4
次のそれそれのコードを改良せよ
#+BEGIN_SRC C
  /* 改良前 */
  if (!(c == 'y' || c == 'Y'))
      return;
  /* 改良後 */
  if ((c != 'y' && c != 'Y'))
      return;

  /* 改良前 */
  length = (length < BUFSIZE) ? length : BUFSIZE;
  /* 改良後 */
  if (length < BUFSIZE)
      length = length;
  else
      length = BUFSIZE;

  /* 改良前 */
  flag = flag ? 0 : 1;
  /* 改良後 */
  if (flag != 0)
      flag = 1;

  /* 改良前 */
  quote = (*line == '"') ? 1 : 0;
  /* 改良後 */
  if (*line == '"')
      isquote = 1;
  else
      isquote = 0;

  /* 改良前 */
  if (val & 1)
      bit = 1;
  else
      bit = 0;
  /* 改良後 */
  if (val == 0)
      bit = 0;
  else
      bit = 1;
#+END_SRC
**** 問題1-5
次の部分の問題点は何か
#+BEGIN_SRC C
  int read(int *ip) {             /* ipがまだ代入されていないうちにポインタが呼ばれていることが問題 */
      scanf("%d", ip);
      return *ip;
  }

  insert(&graph[vert], read[&val], read(&ch));
#+END_SRC

**** 問題1-6
さまざまな評価順によって生成される可能性のある出力をすべて列挙せよ
#+BEGIN_SRC C
  #include <stdio.h>

  int main(void){
      int n = 1;
      printf("%d %d\n", n++, n++);
      return 0;
  }
#+END_SRC
- 1, 2 <- gccではエラーもでた．
- 2, 2
- 2, 3
- 変な値が2つ

** 1.3 一貫性と慣用句
** 1.4 関数マクロ
** 1.5 マジックナンバー
** 1.6 コメント
** 1.7 なぜ手間をかけるのか
** 1.8 参考文献
* 第2章 アルゴリズムとデータ構造
* 第3章 設計と実装
* 第4章 インターフェイス
* 第5章 デバッグ
* 第6章 テスト
* 第7章 性能
* 第8章 移植性
* 第9章 記法
